import crypto from "crypto";

const ENCRYPTION_KEY = crypto.createHash("sha256").update(process.env.SECRET_KEY!).digest();
const IV_LENGTH = parseInt(process.env.IV_LENGTH!);

export function encrypt(text: string): string {
    // A random 16-byte IV
    const iv = crypto.randomBytes(IV_LENGTH);

    // Cipher instance using AES-256-GCM with the secret key and IV
    const cipher = crypto.createCipheriv("aes-256-gcm", ENCRYPTION_KEY, iv);

    // Encrypt the text and store it in encrypted buffer
    const encrypted = Buffer.concat([
        cipher.update(text, "utf8"), // encrypt the input text (utf8)
        cipher.final(),              // finalize encryption and flush remaining bytes
    ]);

    // Get the authentication tag generated by GCM (ensures integrity)
    const authTag = cipher.getAuthTag();

    // Combine iv + encrypted + authTag into a single string (hex format)
    // Separate them using colons so we can split them later
    return [
        iv.toString("hex"),          // IV (needed for decryption)
        encrypted.toString("hex"),   // Encrypted data
        authTag.toString("hex"),     // Auth tag for verifying tampering
    ].join(":");
}

export function decrypt(encryptedData: string): string {
    // Split the encryptedData into its parts: iv, encrypted content, and authTag
    const [ivHex, encryptedHex, authTagHex] = encryptedData.split(":");

    // Convert the hex strings back into buffers
    const iv = Buffer.from(ivHex, "hex");           // IV used during encryption
    const encryptedText = Buffer.from(encryptedHex, "hex"); // Encrypted data
    const authTag = Buffer.from(authTagHex, "hex"); // Auth tag for integrity check

    // Decipher instance using AES-256-GCM with the same secret key and IV
    const decipher = crypto.createDecipheriv("aes-256-gcm", ENCRYPTION_KEY, iv);

    // Set the authentication tag so it can verify if the data was tampered
    decipher.setAuthTag(authTag);

    // Decrypt the data and return the plain text
    const decrypted = Buffer.concat([
        decipher.update(encryptedText), // Decrypt the encrypted buffer
        decipher.final(),               // Finalize decryption and flush remaining bytes
    ]);

    // Convert the decrypted buffer back to a utf8 string
    return decrypted.toString("utf8");
}